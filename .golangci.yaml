# This file contains the configuration options for golangci-lint tool. It is a
# modified version of a reference file obtained from
# https://github.com/golangci/golangci-lint/blob/4deb32f2c083b244f64993e8ff40c97b52bc513a/.golangci.reference.yml

# Options for analysis running.
run:
  # The default concurrency value is the number of available CPU.
  #concurrency: 4

  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 10m

  # Exit code when at least one issue was found.
  # Default: 1
  #issues-exit-code: 2

  # Include test files or not.
  # Default: true
  #tests: false

  # List of build tags, all linters use it.
  # Default: [].
  build-tags:
    - aws
    - ibmcloud
    - libvirt
    - azure

  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path.
  # Default value is empty list,
  # but default dirs are skipped independently of this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  #skip-dirs:
  #  - src/external_libs
  #  - autogenerated_by_my_lib

  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  #skip-dirs-use-default: false

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  #skip-files:
  #  - ".*\\.my\\.go$"
  #  - lib/bad.go

  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  #modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

  # Define the Go version limit.
  # Mainly related to generics support in go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17
  #go: '1.18'


# output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.json,colored-line-number"
  #
  # Default: colored-line-number
  #format: json

  # Print lines of code with issue.
  # Default: true
  #print-issued-lines: false

  # Print linter name in the end of issue text.
  # Default: true
  #print-linter-name: false

  # Make issues output unique by line.
  # Default: true
  #uniq-by-line: false

  # Add a prefix to the output file references.
  # Default is no prefix.
  #path-prefix: ""

  # Sort results by: filepath, line and column.
  #sort-results: false


# All available settings of linters enabled.
linters-settings:
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    #check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Such cases aren't reported by default.
    # Default: false
    #check-blank: true

    # DEPRECATED comma-separated list of pairs of the form pkg:regex
    #
    # the regex is used to ignore names within pkg. (default "fmt:.*").
    # see https://github.com/kisielk/errcheck#the-deprecated-method for details
    #ignore: fmt:.*,io/ioutil:^Read.*

    # To disable the errcheck built-in exclude list.
    # See `-excludeonly` option in https://github.com/kisielk/errcheck#excluding-functions for details.
    # Default: false
    #disable-default-exclusions: true

    # DEPRECATED use exclude-functions instead.
    #
    # Path to a file containing a list of functions to exclude from checking.
    # See https://github.com/kisielk/errcheck#excluding-functions for details.
    #exclude: /path/to/file.txt

    # List of functions to exclude from checking, where each entry is a single function to exclude.
    # See https://github.com/kisielk/errcheck#excluding-functions for details.
    #exclude-functions:
    #  - io/ioutil.ReadFile
    #  - io.Copy(*bytes.Buffer)
    #  - io.Copy(os.Stdout)

  gofmt:
    # Simplify code: gofmt with `-s` option.
    # Default: true
    #simplify: false

  gosimple:
    # Select the Go version to target.
    # Default: 1.13
    go: "1.20"
    # https://staticcheck.io/docs/options#checks
    checks: [ "all" ]

  govet:
    # Report about shadowed variables.
    # Default: false
    check-shadowing: true

    # Settings per analyzer.
    #settings:
      # Analyzer name, run `go tool vet help` to see all analyzers.
      #  printf:
        # Run `go tool vet help printf` to see available settings for `printf` analyzer.
        #  funcs:
        #  - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
        #  - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
        #  - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
        #  - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    # Disable all analyzers.
    # Default: false
    #disable-all: true
    # Enable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    #enable:
    #  - asmdecl

    # Enable all analyzers.
    # Default: false
    #enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    #disable:
    #  - asmdecl

  staticcheck:
    # Select the Go version to target.
    # Default: 1.13
    go: "1.20"
    # https://staticcheck.io/docs/options#checks
    checks: [ "all" ]

  # The custom section can be used to define linter plugins to be loaded at runtime.
  # See README documentation for more info.
  #custom:
    # Each custom linter should have a unique name.
    #  example:
      # The path to the plugin *.so. Can be absolute or local.
      # Required for each custom linter.
      #path: /path/to/example.so
      # The description of the linter.
      # Optional.
      #description: This is an example usage of a plugin linter.
      # Intended to point to the repo location of the linter.
      # Optional.
      #original-url: github.com/golangci/example-linter


linters:
  # Disable all linters.
  # Default: false
  disable-all: true
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default-linters
  enable:
    # Explicitly listing the linters that would be enabled by default.
    - errcheck
    - gosimple
    - govet
    - ineffassign
    - staticcheck
    - typecheck
    - unused
    # Additional linters.
    - gofmt

  # Enable all available linters.
  # Default: false
  #enable-all: true
  # Disable specific linter
  # https://golangci-lint.run/usage/linters/#disabled-by-default-linters--e--enable
  #disable:
  #  - asciicheck

  # Enable presets.
  # https://golangci-lint.run/usage/linters
  #presets:
  #  - bugs
  #  - comment
  #  - complexity
  #  - error
  #  - format
  #  - import
  #  - metalinter
  #  - module
  #  - performance
  #  - sql
  #  - style
  #  - test
  #  - unused

  # Run only fast linters from enabled linters set (first run won't be fast)
  # Default: false
  #fast: true


issues:
  # List of regexps of issue texts to exclude.
  #
  # But independently of this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`.
  # To list all excluded by default patterns execute `golangci-lint run --help`
  #
  # Default: []
  exclude:
    - 'declaration of "(err|ctx)" shadows declaration at'

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    #- path: _test\.go
    #  linters:
    #    - gocyclo
    #    - errcheck
    #    - dupl
    #    - gosec

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via `nolint` comments.
    #- path: internal/hmac/
    #  text: "weak cryptographic primitive"
    #  linters:
    #    - gosec

    # Exclude some `staticcheck` messages.
    #- linters:
    #    - staticcheck
    #  text: "SA9003:"

    # Exclude `lll` issues for long lines with `go:generate`.
    #- linters:
    #    - lll
    #  source: "^//go:generate "

    # "github.com/container-storage-interface/spec/lib/go/csi" still uses
    # "github.com/golang/protobuf", which is the deprecated protobuf V1.
    - path: ^volumes/csi-wrapper/pkg/wrapper/
      linters: [staticcheck]
      text: 'SA1019: "github.com/golang/protobuf/jsonpb" is deprecated: Use the "google.golang.org/protobuf/encoding/protojson" package instead.'

  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option.
  # To list all excluded by default patterns execute `golangci-lint run --help`.
  # Default: true.
  #exclude-use-default: false

  # If set to true exclude and exclude-rules regular expressions become case-sensitive.
  # Default: false
  exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable.
  # Default: []
  #include:
  #  - EXC0002 # disable excluding of issues about comments from golint.

  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  #
  # Default: false.
  #new: true

  # Show only new issues created after git revision `REV`.
  #new-from-rev: HEAD

  # Show only new issues created in git patch with set file path.
  #new-from-patch: path/to/patch/file

  # Fix found issues (if it's supported by the linter).
  #fix: true


severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  #
  # Default value is an empty string.
  #default-severity: error

  # If set to true `severity-rules` regular expressions become case-sensitive.
  # Default: false
  #case-sensitive: true

  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  #rules:
  #  - linters:
  #    - dupl
  #    severity: info
