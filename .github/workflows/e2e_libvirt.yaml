# (C) Copyright Confidential Containers Contributors 2023.
# SPDX-License-Identifier: Apache-2.0
#
# Run libvirt e2e tests.
name: (Callable) libvirt e2e tests

on:
  workflow_call:
    inputs:
      runner:
        default: 'ubuntu-24.04'
        description: The runner to execute the workflow on. Defaults to 'ubuntu-24.04'.
        required: false
        type: string
      podvm_image:
        required: true
        type: string
      caa_image:
        required: true
        type: string
      install_directory_artifact:
        description: The archive name of the install directory
        default: ''
        required: false
        type: string
      git_ref:
        default: 'main'
        description: Git ref to checkout the cloud-api-adaptor repository. Defaults to main.
        required: false
        type: string
      secure_comms:
        default: 'none'
        description: SecureComms configuration. Defaults to none.
        required: false
        type: string
      oras:
        description: Whether the podvm_image is oras published
        default: false
        required: false
        type: boolean
      container_runtime:
        default: 'containerd'
        description: Name of the container runtime. Either containerd or crio.
        required: false
        type: string
    secrets:
      REGISTRY_CREDENTIAL_ENCODED:
        required: true

env:
  CLOUD_PROVIDER: libvirt
  DEBIAN_FRONTEND: noninteractive

defaults:
  run:
    working-directory: src/cloud-api-adaptor

permissions: {}

jobs:
  test:
    runs-on: ${{ inputs.runner }}
    name: "Libvirt e2e tests: (${{ inputs.runner }}, ${{ inputs.container_runtime }}, secure_comms: ${{ inputs.secure_comms }}, mkosi: ${{ inputs.oras }}"
    # TODO: remove this when secure_comms is stable again (issue #2635)
    continue-on-error: ${{ inputs.secure_comms != 'none' && true || false }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          ref: ${{ inputs.git_ref }}

      - name: Rebase the code
        if: github.event_name == 'pull_request_target'
        working-directory: ./
        run: |
          ./hack/ci-helper.sh rebase-atop-of-the-latest-target-branch

      - name: Remove unnecessary directories to free up space
        working-directory: ./
        run: |
          sudo ./hack/ci-helper.sh clean-up-runner

      - name: Read properties from versions.yaml
        run: |
          sudo snap install yq
          go_version="$(yq '.tools.golang' versions.yaml)"
          [ -n "$go_version" ]
          echo "GO_VERSION=${go_version}" >> "$GITHUB_ENV"
          echo "ORAS_VERSION=$(yq -e '.tools.oras' versions.yaml)" >> "$GITHUB_ENV"

      - name: Setup Golang version ${{ env.GO_VERSION }}
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: "**/go.sum"

      - name: Setup docker
        if: ${{ runner.environment == 'self-hosted' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y docker.io
          sudo usermod -aG docker "$USER"

      - uses: oras-project/setup-oras@22ce207df3b08e061f537244349aac6ae1d214f6 # v1.2.4
        with:
          version: ${{ env.ORAS_VERSION }}

      - name: Extract qcow2 from ${{ inputs.podvm_image }}
        if: ${{ !inputs.oras }}
        run: |
           qcow2=$(echo ${{ inputs.podvm_image }} | sed -e "s#.*/\(.*\):.*#\1.qcow2#")
           ./hack/download-image.sh ${{ inputs.podvm_image }} . -o "${qcow2}" --clean-up
           echo "PODVM_QCOW2=$(pwd)/${qcow2}" >> "$GITHUB_ENV"
           # Clean up docker images to make space
           docker system prune -a -f
        working-directory: src/cloud-api-adaptor/podvm

      - name: Use oras to get qcow2 from ${{ inputs.podvm_image }}
        if: ${{ inputs.oras }}
        run: |
          oras pull ${{ inputs.podvm_image }}
          tar xvJpf podvm.tar.xz
          qcow2=$(find ./*.qcow2)
          echo "PODVM_QCOW2=$(pwd)/${qcow2}" >> "$GITHUB_ENV"
        working-directory: src/cloud-api-adaptor/podvm

      - name: Config Libvirt
        run: |
          export TEST_E2E_SECURE_COMMS="${{ inputs.secure_comms }}"
          ./libvirt/config_libvirt.sh
          echo "container_runtime=\"${{ inputs.container_runtime }}\"" >> libvirt.properties
          # For debugging
          cat libvirt.properties
          # Add the kcli install directory to PATH for later steps
          echo "${HOME}/.local/bin" >> "$GITHUB_PATH"

      - name: Install gh cli
        run: |
          sudo apt update -y
          sudo apt install -y gh

      - name: Double check that OVMF is installed
        run: |
          sudo apt update -y
          sudo apt install -y ovmf

      - name: Install kustomize
        run: |
          command -v kustomize >/dev/null || \
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | \
            sudo bash -s /usr/local/bin

# For the legacy packer approach we don't want to use the default firmware, so comment it out
      - name: Set blank firmware for packer libvirt tests
        if: ${{ !inputs.oras }}
        run: |
          cd "install/overlays/libvirt"
          sed -i 's/\(- LIBVIRT_EFI_FIRMWARE=.*\)/#\1/g' kustomization.yaml
          # Print for debugging
          echo "::group::Kustomization.yaml"
          cat kustomization.yaml
          echo "::endgroup::"

      - name: Update kustomization configuration
        run: |
          cd "install/overlays/libvirt"
          kustomize edit set image "cloud-api-adaptor=${{ inputs.caa_image }}"
          # Print for debugging
          echo "::group::libvirt kustomization"
          cat kustomization.yaml
          echo "::endgroup::"

      - name: Checkout KBS Repository
        run: |
          test/utils/checkout_kbs.sh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: run tests
        id: runTests
        env:
          AUTHENTICATED_REGISTRY_IMAGE: ${{ vars.AUTHENTICATED_REGISTRY_IMAGE }}
          REGISTRY_CREDENTIAL_ENCODED: ${{ secrets.REGISTRY_CREDENTIAL_ENCODED }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export CLOUD_PROVIDER=libvirt
          export CONTAINER_RUNTIME="${{ inputs.container_runtime }}"
          export DEPLOY_KBS=true
          export TEST_PROVISION="yes"
          export TEST_TEARDOWN="no"
          export TEST_PROVISION_FILE="$PWD/libvirt.properties"
          export TEST_PODVM_IMAGE="${{ env.PODVM_QCOW2 }}"
          export TEST_E2E_TIMEOUT="75m"
          export TEST_E2E_SECURE_COMMS="${{ inputs.secure_comms }}"

          make test-e2e

      - name: Debug tests failure
        if: failure() && steps.runTests.outcome == 'failure'
        timeout-minutes: 15
        working-directory: ./
        run: |
          export KUBECONFIG="${HOME}/.kcli/clusters/peer-pods/auth/kubeconfig"
          ./hack/ci-e2e-debug-fail.sh
        # Avoid running with `set -e` as command fails should be allowed
        shell: bash {0}

      - name: Clean-up cluster
        if: ${{ always() && runner.environment == 'self-hosted' }}
        run: ./libvirt/kcli_cluster.sh delete
