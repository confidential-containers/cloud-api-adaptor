# (C) Copyright Confidential Containers Contributors 2023.
# SPDX-License-Identifier: Apache-2.0
#
# Run libvirt e2e tests.
name: (Callable) libvirt e2e tests

on:
  workflow_call:
    inputs:
      podvm_image:
        required: true
        type: string
      install_directory_artifact:
        description: The archive name of the install directory
        default: ''
        required: false
        type: string
      git_ref:
        default: 'main'
        description: Git ref to checkout the cloud-api-adaptor repository. Defaults to main.
        required: false
        type: string

env:
  CLOUD_PROVIDER: libvirt
  DEBIAN_FRONTEND: noninteractive

defaults:
  run:
    working-directory: src/cloud-api-adaptor

jobs:
  test:
    runs-on: az-ubuntu-2204
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.git_ref }}

      - name: Rebase the code
        if: github.event_name == 'pull_request_target'
        working-directory: ./
        run: |
          ./hack/ci-helper.sh rebase-atop-of-the-latest-target-branch

      - name: Read properties from versions.yaml
        run: |
          sudo snap install yq
          go_version="$(yq '.tools.golang' versions.yaml)"
          [ -n "$go_version" ]
          echo "GO_VERSION=${go_version}" >> "$GITHUB_ENV"

      - name: Setup Golang version ${{ env.GO_VERSION }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup docker
        run: |
          sudo apt-get install -y docker.io
          sudo usermod -aG docker "$USER"

      - name: Extract qcow2 from ${{ inputs.podvm_image }}
        run: |
           qcow2=$(echo ${{ inputs.podvm_image }} | sed -e "s#.*/\(.*\):.*#\1.qcow2#")
           ./hack/download-image.sh ${{ inputs.podvm_image }} . -o ${qcow2}
           echo "PODVM_QCOW2=$(pwd)/${qcow2}" >> "$GITHUB_ENV"
        working-directory: src/cloud-api-adaptor/podvm

      - name: Get the install directory
        if: ${{ inputs.install_directory_artifact != '' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.install_directory_artifact }}
          path: src/cloud-api-adaptor/install

      - name: Config Libvirt
        run: |
          ./libvirt/config_libvirt.sh
          # For debugging
          cat libvirt.properties

      - name: run tests
        id: runTests
        run: |
          export CLOUD_PROVIDER=libvirt
          export TEST_PROVISION="yes"
          export TEST_TEARDOWN="no"
          export TEST_PROVISION_FILE="$PWD/libvirt.properties"
          export TEST_PODVM_IMAGE="${{ env.PODVM_QCOW2 }}"
          export TEST_E2E_TIMEOUT="50m"

          make test-e2e

      - name: Debug tests failure
        if: failure() && steps.runTests.outcome == 'failure'
        run: |
          export KUBECONFIG="${HOME}/.kcli/clusters/peer-pods/auth/kubeconfig"

          echo "::group::CoCo and Peer Pods installation"
          kubectl get pods -n confidential-containers-system
          echo "::endgroup::"

          echo "::group::cloud-api-adaptor logs"
          kubectl logs -l app=cloud-api-adaptor -n confidential-containers-system
          echo "::endgroup::"

          for pod in $(kubectl get pods -o name 2>/dev/null); do
            echo "::group::Describe $pod"
            kubectl describe "$pod"
            echo "::endgroup::"
          done

          echo "::group::Libvirt domains"
          sudo virsh list
          echo "::endgroup::"

          for podvm in $(sudo virsh list --name | grep "podvm-"); do
            echo "::group::podvm $podvm"
            sudo virsh dominfo "$podvm"
            sudo virsh domifaddr "$podvm"
            echo "::endgroup::"
          done

          echo "::group::podvm base volume"
          sudo virsh vol-info --pool default podvm-base.qcow2
          ls -lh /var/lib/libvirt/images/podvm-base.qcow2
          echo "::endgroup::"

          echo "::group::Check podvm base volume integrity"
          sudo qemu-img check /var/lib/libvirt/images/podvm-base.qcow2
          echo "::endgroup::"
        # Avoid running with `set -e` as command fails should be allowed
        shell: bash {0}
