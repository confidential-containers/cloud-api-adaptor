name: (Callable) Build and push cloud-api-adaptor image

on:
  workflow_call:
    inputs:
      registry:
        default: 'quay.io/confidential-containers'
        description: 'Image registry (e.g. "quay.io/confidential-containers") where the built image will be pushed to'
        required: false
        type: string
      dev_tags:
        default: ''
        description: 'Comma-separated list of tags for the dev built image (e.g. latest,ci-dev). By default uses the values from hack/build.sh'
        required: false
        type: string
      release_tags:
        default: ''
        description: 'Likewise but for the release built image'
        required: false
        type: string
      git_ref:
        default: 'main'
        description: Git ref to checkout the cloud-api-adaptor repository. Defaults to main.
        required: false
        type: string
    secrets:
      QUAY_PASSWORD:
        required: true

defaults:
  run:
    working-directory: src/cloud-api-adaptor

permissions: {}

jobs:
  upload_tags:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout the code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          ref: "${{ inputs.git_ref }}"
          persist-credentials: false

      - name: Create tags.txt
        run: |
          # Matches expected logic in ./hack/build.sh
          commit=$(git rev-parse HEAD)
          dev_tags=${{ inputs.dev_tags }}
          release_tags=${{ inputs.release_tags }}
          echo "dev_tags=${dev_tags:-latest,dev-${commit}}" > tags.txt
          echo "release_tags=${release_tags:-${commit}}" >> tags.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: image-tags
          retention-days: 1
          path: |
            src/cloud-api-adaptor/tags.txt

  build_push_job:
    name: build and push
    needs: [upload_tags]
    runs-on: ${{ matrix.type == 'dev-s390x' && 's390x' || 'ubuntu-22.04' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - type: dev-amd64
            arches: "linux/amd64"
          - type: dev-s390x
            arches: "linux/s390x"
          - type: dev-ppc64le
            arches: "linux/ppc64le"
          - type: release-amd64
            arches: "linux/amd64"
          - type: release-s390x
            arches: "linux/s390x"
          - type: release-ppc64le
            arches: "linux/ppc64le"
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout the code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          ref: "${{ inputs.git_ref }}"
          persist-credentials: false

      - name: Read properties from versions.yaml
        run: |
          go_version="$(yq '.tools.golang' versions.yaml)"
          [ -n "$go_version" ]
          echo "GO_VERSION=${go_version}" >> "$GITHUB_ENV"

      - name: Setup Golang version ${{ env.GO_VERSION }}
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: "**/go.sum"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Install build dependencies
        if: ${{ startsWith(matrix.type, 'dev-') }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libvirt-dev

      - name: Login to quay Container Registry
        if: ${{ startsWith(inputs.registry, 'quay.io') }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ vars.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Login to Github Container Registry
        if: ${{ startsWith(inputs.registry, 'ghcr.io') }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push dev image
        if: ${{ startsWith(matrix.type, 'dev-') }}
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          # We are not interested in timeout but this field is required
          # so setting to 4x the time it usually take to complete.
          timeout_minutes: 60
          retry_wait_seconds: 120
          max_attempts: 3
          command: |
            echo "Build and push dev image with libvirt"
            cd src/cloud-api-adaptor && ARCHES=${{matrix.arches}} RELEASE_BUILD=false DEV_TAGS=${{ inputs.dev_tags}} make image-with-arch registry=${{ inputs.registry }}

      - name: Build and push release image
        if: ${{ startsWith(matrix.type, 'release-') }}
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        with:
          # We are not interested in timeout but this field is required
          # so setting to 4x the time it usually take to complete.
          timeout_minutes: 60
          retry_wait_seconds: 120
          max_attempts: 3
          command: |
            echo "Build and push release image without libvirt"
            cd src/cloud-api-adaptor && ARCHES=${{matrix.arches}} RELEASE_BUILD=true RELEASE_TAGS=${{ inputs.release_tags}} make image-with-arch registry=${{ inputs.registry }}

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: tags-architectures-${{matrix.type}}
          retention-days: 1
          path: |
            src/cloud-api-adaptor/tags-architectures-*

  manifest_job:
    name: generate images manifest
    runs-on: ubuntu-24.04
    needs: [build_push_job]
    steps:
      - name: Checkout the code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          ref: "${{ inputs.git_ref }}"
          persist-credentials: false

      - name: Download release tags.txt
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: image-tags
          path: src/cloud-api-adaptor

      - name: Download release commits file
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: tags-architectures-*
          merge-multiple: true
          path: src/cloud-api-adaptor/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Login to quay Container Registry
        if: ${{ startsWith(inputs.registry, 'quay.io') }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ vars.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Login to Github Container Registry
        if: ${{ startsWith(inputs.registry, 'ghcr.io') }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image manifest
        env:
          registry: ${{ inputs.registry }}
        run:  |
          hack/image-manifest.sh
