name: azure-e2e-test

permissions: {}

env:
  CLUSTER_NAME_TEMPLATE: "{0}-e2e-test-${{ github.run_id }}-${{ github.run_attempt }}"
  CLOUD_PROVIDER: "azure"
  BUILTIN_CLOUD_PROVIDERS: "azure"
  TEST_E2E_CREATE_RG: "no"
  ACR_URL: "${{ vars.AZURE_ACR_URL }}"
  MI_NAME: "${{ vars.AZURE_MANAGED_IDENTITY_NAME }}"
  RG_NAME: "${{ vars.AZURE_RESOURCE_GROUP }}"
  RUN: "${{ github.run_id }}-${{ github.run_attempt }}"
  TEST_PROVISION_FILE: "${{ github.workspace }}/test_provision.properties"

on:
  workflow_call:
    inputs:
      podvm-image-id:
        type: string
        description: prebuilt podvm image
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_TENANT_ID:
        required: true

  workflow_dispatch:
    inputs:
      podvm-image-id:
        type: string
        description: prebuilt podvm image

jobs:
  build-caa-container-image:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: src/cloud-api-adaptor
    outputs:
      caa-image: "${{ steps.build-container.outputs.caa-image }}"
    permissions:
      id-token: write
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false

    - uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
      name: 'Az CLI login'
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

    - name: Build container image
      id: build-container
      env:
        ARCHES: "linux/amd64"
        RELEASE_BUILD: "false"
      run: |
        az acr login --name "$ACR_URL"
        # This builds image in the following format:
        # $ACR_URL/cloud-api-adaptor:dev-COMMIT
        make image "registry=${ACR_URL}"
        echo "caa-image=${ACR_URL}/cloud-api-adaptor:dev-${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

  install-aks:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: src/cloud-api-adaptor
    needs:
    - build-caa-container-image
    # when none of required steps failed, skipped is ok
    if: always() && !failure() && !cancelled()
    strategy:
      matrix:
        parameters:
          - id: "tdx"
            machine_type: "Standard_DC2es_v6"
            location: "eastus"
            jitter: 0
          - id: "snp"
            machine_type: "Standard_DC2as_v5"
            location: "northeurope"
            jitter: 10
    permissions:
      id-token: write
    env:
      LOCATION: "${{ matrix.parameters.location }}"

    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false

    - name: Extract go version number
      run: echo "GO_VERSION=$(yq -e '.tools.golang' versions.yaml)" >> "$GITHUB_ENV"

    - name: Set up Go environment
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        go-version: "${{ env.GO_VERSION }}"
        cache-dependency-path: "**/go.sum"

    - name: Create provisioner file
      env:
        CAA_IMAGE: "${{ needs.build-caa-container-image.outputs.caa-image }}"
        CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
        CLUSTER_NAME: "${{ format(env.CLUSTER_NAME_TEMPLATE, matrix.parameters.id) }}"
        IMAGE_ID: "${{ inputs.podvm-image-id }}"
        INSTANCE_SIZE: "${{ matrix.parameters.machine_type }}"
        MI_NAME: "${{ vars.AZURE_MANAGED_IDENTITY_NAME }}"
        SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        TEST_TAGS: "owner=github-actions,run=${{ env.RUN }}"
      run: |
        cat << EOF > "$TEST_PROVISION_FILE"
          AZURE_CLIENT_ID="$CLIENT_ID"
          AZURE_IMAGE_ID="$IMAGE_ID"
          AZURE_INSTANCE_SIZE="$INSTANCE_SIZE"
          AZURE_SUBSCRIPTION_ID="$SUBSCRIPTION_ID"
          CAA_IMAGE="$CAA_IMAGE"
          CLUSTER_NAME="$CLUSTER_NAME"
          FEDERATED_CREDENTIAL_NAME="$CLUSTER_NAME"
          IS_CI_MANAGED_CLUSTER="true"
          LOCATION="$LOCATION"
          MANAGED_IDENTITY_NAME="$MI_NAME"
          RESOURCE_GROUP_NAME="$RG_NAME"
          TAGS="$TEST_TAGS"
        EOF
        cat "$TEST_PROVISION_FILE"
        # assert that no variable is unset
        ! grep -E '=x$|=""$' "$TEST_PROVISION_FILE"

    - name: Save the configuration created here
      uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
      with:
        path: ${{ env.TEST_PROVISION_FILE }}
        name: e2e-configuration-${{ matrix.parameters.id }}

    - uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
      name: 'Az CLI login'
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}

    # Install AKS cluster in parallel with the podvm image build.
    - name: Run provisioner
      working-directory: src/cloud-api-adaptor/test/tools
      run: |
        sleep ${{ matrix.parameters.jitter }}
        make caa-provisioner-cli
        ./caa-provisioner-cli -action=createcluster

  run-e2e-test:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: src/cloud-api-adaptor
    needs:
    - install-aks
    # when none of required steps failed, build-podvm-image can be skipped
    if: always() && !failure() && !cancelled()
    strategy:
      matrix:
        parameters:
          - id: "tdx"
            machine_type: "Standard_DC2es_v6"
            location: "eastus"
          - id: "snp"
            machine_type: "Standard_DC2as_v5"
            location: "northeurope"
    permissions:
      id-token: write
    env:
      TEE: "${{ matrix.parameters.id }}"
      LOCATION: "${{ matrix.parameters.location }}"

    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false

    - name: Extract version numbers
      run: |
        echo "GO_VERSION=$(yq -e '.tools.golang' versions.yaml)" >> "$GITHUB_ENV"
        echo "ORAS_VERSION=$(yq -e '.tools.oras' versions.yaml)" >> "$GITHUB_ENV"

    - uses: oras-project/setup-oras@22ce207df3b08e061f537244349aac6ae1d214f6 # v1.2.4
      with:
        version: ${{ env.ORAS_VERSION }}

    - name: Set up Go environment
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: "**/go.sum"

    - name: Install cidr calculator
      run: |
        sudo apt-get update
        sudo apt-get install -y sipcalc

    - name: Install kustomize
      run: |
        command -v kustomize >/dev/null || \
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | \
          sudo bash -s /usr/local/bin

    - name: Restore the configuration created before
      uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6.0.0
      with:
        name: e2e-configuration-${{ matrix.parameters.id }}

    - uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
      name: 'Az CLI login'
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}

    - name: Create peerpod subnet
      env:
        CLUSTER_NAME: "${{ format(env.CLUSTER_NAME_TEMPLATE, matrix.parameters.id) }}"
      run: |
        node_rg="$(az aks show -g "$RG_NAME" -n "$CLUSTER_NAME" --query nodeResourceGroup -o tsv)"
        vnet_name="$(az network vnet list -g "$node_rg" --query '[].name' -o tsv)"
        node_cidr="$(az network vnet show -n "$vnet_name" -g "$node_rg" --query "subnets[?name == 'aks-subnet'].addressPrefix" -o tsv)"
        mask="${node_cidr#*/}"
        peerpod_cidr="$(sipcalc "$node_cidr" -n 2 | grep ^Network | grep -v current | cut -d' ' -f2)/${mask}"
        az network public-ip create -g "$node_rg" -n peerpod
        az network nat gateway create -g "$node_rg" -l "$LOCATION" --public-ip-addresses peerpod -n peerpod
        az network vnet subnet create -g "$node_rg" --vnet-name "$vnet_name" --nat-gateway peerpod --address-prefixes "$peerpod_cidr" -n peerpod
        subnet_id="$(az network vnet subnet show -g "$node_rg" --vnet-name "$vnet_name" -n peerpod --query id -o tsv)"

        cat << EOF >> "$TEST_PROVISION_FILE"
        AZURE_SUBNET_ID="$subnet_id"
        EOF

    - name: Checkout KBS Repository
      run: test/utils/checkout_kbs.sh

    - name: Run e2e test
      env:
        TEST_PROVISION: "no"
        DEPLOY_KBS: "yes"
        CUSTOM_PCCS_URL: "https://global.acccache.azure.net/sgx/certification/v4"
        CLUSTER_NAME: "${{ format(env.CLUSTER_NAME_TEMPLATE, matrix.parameters.id) }}"
      run: |
        az aks get-credentials --resource-group "$RG_NAME" --name "$CLUSTER_NAME"
        make test-e2e RUN_TESTS="^Test\(CreateSimplePodAzure\|RemoteAttestation\|InitDataMeasurement\)$"

  cleanup:
    runs-on: ubuntu-24.04
    needs:
    - run-e2e-test
    if: always()
    strategy:
      matrix:
        parameters:
          - id: "tdx"
            jitter: 0
          - id: "snp"
            jitter: 10
    permissions:
      id-token: write
    env:
      JITTER: ${{ matrix.parameters.jitter }}

    steps:
    - uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
      name: 'Az CLI login'
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}

    - name: Delete coco namespace
      # We want to delete the coco namespace because CAA might still spawn resources
      # which prevents deletion of the AKS cluster
      env:
        CLUSTER_NAME: "${{ format(env.CLUSTER_NAME_TEMPLATE, matrix.parameters.id) }}"
      run: |
        az aks get-credentials --resource-group "$RG_NAME" --name "$CLUSTER_NAME" || true
        namespace="confidential-containers-system"
        kubectl patch namespace "$namespace" -p '{"metadata":{"finalizers": null }}' || true
        kubectl delete namespace "$namespace" || true

    - name: Remove container image
      run: |
        # Delete the CAA container image built for this run.
        suffix=".azurecr.io"
        registry_name="${ACR_URL%"${suffix}"}"

        az acr repository delete \
          --name "${registry_name}" \
          --image "${ACR_URL}/cloud-api-adaptor:dev-${GITHUB_SHA}" \
          --yes || true

    - name: Remove dangling VMs
      # Remove any VMs that might have been left behind in failed test runs
      run: |
        vms=$(az resource list \
          --tag owner=github-actions \
          --tag run="$RUN" \
          -o tsv --query "[?type == 'Microsoft.Compute/virtualMachines'].name")
        for vm in $vms; do
          az vm delete -n "$vm" -g "$RG_NAME" --yes || true
        done

    - name: Remove dangling NICs
      # Remove any NICs that might have been left behind in failed test runs
      # NICs are reserved for 180s for VMs, even if they never launched
      run: |
        nics=$(az resource list \
          --tag owner=github-actions \
          --tag run="$RUN" \
          -o tsv --query "[?type == 'Microsoft.Network/networkInterfaces'].name")
        sleep 180
        for nic in $nics; do
          az network nic delete -n "$nic" -g "$RG_NAME" || true
        done

    - name: Remove AKS cluster
      env:
        CLUSTER_NAME: "${{ format(env.CLUSTER_NAME_TEMPLATE, matrix.parameters.id) }}"
      run: |
        # Delete the cluster even if it has been deleted already or does not exists.
        az aks delete \
          --name "$CLUSTER_NAME" \
          --resource-group "$RG_NAME" \
          --no-wait \
          --yes || true

    - name: Remove federated credential
      env:
        CLUSTER_NAME: "${{ format(env.CLUSTER_NAME_TEMPLATE, matrix.parameters.id) }}"
      run: |
        sleep "$JITTER"
        az identity federated-credential delete \
          --identity-name "$MI_NAME" \
          --name "$CLUSTER_NAME" \
          --resource-group "$RG_NAME" \
          --yes || true
