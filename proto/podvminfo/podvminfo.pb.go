// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: podvminfo/podvminfo.proto

package podvminfo

import (
	context "context"
	fmt "fmt"
	github_com_containerd_ttrpc "github.com/containerd/ttrpc"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetInfoRequest struct {
	PodName              string   `protobuf:"bytes,1,opt,name=PodName,proto3" json:"PodName,omitempty"`
	PodNamespace         string   `protobuf:"bytes,2,opt,name=PodNamespace,proto3" json:"PodNamespace,omitempty"`
	Wait                 bool     `protobuf:"varint,3,opt,name=Wait,proto3" json:"Wait,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInfoRequest) Reset()      { *m = GetInfoRequest{} }
func (*GetInfoRequest) ProtoMessage() {}
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5023c5fde235d5c, []int{0}
}
func (m *GetInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoRequest.Merge(m, src)
}
func (m *GetInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoRequest proto.InternalMessageInfo

type GetInfoResponse struct {
	VMID                 string   `protobuf:"bytes,1,opt,name=VMID,proto3" json:"VMID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInfoResponse) Reset()      { *m = GetInfoResponse{} }
func (*GetInfoResponse) ProtoMessage() {}
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5023c5fde235d5c, []int{1}
}
func (m *GetInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoResponse.Merge(m, src)
}
func (m *GetInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetInfoRequest)(nil), "podvminfo.GetInfoRequest")
	proto.RegisterType((*GetInfoResponse)(nil), "podvminfo.GetInfoResponse")
}

func init() { proto.RegisterFile("podvminfo/podvminfo.proto", fileDescriptor_b5023c5fde235d5c) }

var fileDescriptor_b5023c5fde235d5c = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0x1b, 0x15, 0x67, 0x83, 0x28, 0xe4, 0xd4, 0xed, 0x10, 0x46, 0x41, 0xd8, 0xa5, 0x2d,
	0xe8, 0x37, 0x18, 0x03, 0xd9, 0x61, 0x3a, 0x7a, 0x98, 0xe0, 0x41, 0x48, 0x93, 0x54, 0x03, 0x6b,
	0xfe, 0xb1, 0x49, 0x3d, 0xfb, 0xf1, 0x76, 0xf4, 0xe8, 0xd1, 0xf5, 0x93, 0x88, 0xb1, 0x76, 0x14,
	0xbc, 0xfd, 0xf2, 0xfe, 0x2f, 0xbc, 0xc7, 0xc3, 0x63, 0x03, 0xe2, 0xad, 0x52, 0xba, 0x84, 0xac,
	0xa7, 0xd4, 0xd4, 0xe0, 0x80, 0x84, 0xbd, 0x10, 0x17, 0xf8, 0xe2, 0x56, 0xba, 0xa5, 0x2e, 0x21,
	0x97, 0xaf, 0x8d, 0xb4, 0x8e, 0x44, 0x78, 0xb4, 0x06, 0x71, 0xc7, 0x2a, 0x19, 0xa1, 0x29, 0x9a,
	0x85, 0xf9, 0xdf, 0x93, 0xc4, 0xf8, 0xbc, 0x43, 0x6b, 0x18, 0x97, 0xd1, 0x91, 0x3f, 0x0f, 0x34,
	0x42, 0xf0, 0xc9, 0x03, 0x53, 0x2e, 0x3a, 0x9e, 0xa2, 0xd9, 0x59, 0xee, 0x39, 0xbe, 0xc2, 0x97,
	0x7d, 0x86, 0x35, 0xa0, 0xad, 0xb7, 0x6d, 0x56, 0xcb, 0x45, 0x97, 0xe0, 0xf9, 0xfa, 0x1e, 0x87,
	0x6b, 0x10, 0x9b, 0xd5, 0x8f, 0x91, 0xcc, 0xf1, 0xa8, 0xfb, 0x43, 0xc6, 0xe9, 0xa1, 0xff, 0xb0,
	0xeb, 0x64, 0xf2, 0xdf, 0xe9, 0x37, 0x22, 0x0e, 0xe6, 0x4f, 0xbb, 0x3d, 0x0d, 0x3e, 0xf7, 0x34,
	0x78, 0x6f, 0x29, 0xda, 0xb5, 0x14, 0x7d, 0xb4, 0x14, 0x7d, 0xb5, 0x14, 0x3d, 0x2e, 0x9e, 0x95,
	0x7b, 0x69, 0x8a, 0x94, 0x43, 0x95, 0x71, 0xd0, 0xa5, 0x12, 0x52, 0x3b, 0xc5, 0xb6, 0x09, 0x07,
	0xed, 0x98, 0xd2, 0xb2, 0xb6, 0x19, 0xdf, 0x42, 0x23, 0x12, 0x66, 0x54, 0xc2, 0x04, 0x33, 0x0e,
	0xea, 0xcc, 0x8f, 0x77, 0x18, 0xb3, 0x38, 0xf5, 0xc2, 0xcd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x47, 0x91, 0x92, 0x20, 0x6a, 0x01, 0x00, 0x00,
}

func (m *GetInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Wait {
		i--
		if m.Wait {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.PodNamespace) > 0 {
		i -= len(m.PodNamespace)
		copy(dAtA[i:], m.PodNamespace)
		i = encodeVarintPodvminfo(dAtA, i, uint64(len(m.PodNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PodName) > 0 {
		i -= len(m.PodName)
		copy(dAtA[i:], m.PodName)
		i = encodeVarintPodvminfo(dAtA, i, uint64(len(m.PodName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VMID) > 0 {
		i -= len(m.VMID)
		copy(dAtA[i:], m.VMID)
		i = encodeVarintPodvminfo(dAtA, i, uint64(len(m.VMID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPodvminfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovPodvminfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovPodvminfo(uint64(l))
	}
	l = len(m.PodNamespace)
	if l > 0 {
		n += 1 + l + sovPodvminfo(uint64(l))
	}
	if m.Wait {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VMID)
	if l > 0 {
		n += 1 + l + sovPodvminfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPodvminfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPodvminfo(x uint64) (n int) {
	return sovPodvminfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetInfoRequest{`,
		`PodName:` + fmt.Sprintf("%v", this.PodName) + `,`,
		`PodNamespace:` + fmt.Sprintf("%v", this.PodNamespace) + `,`,
		`Wait:` + fmt.Sprintf("%v", this.Wait) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetInfoResponse{`,
		`VMID:` + fmt.Sprintf("%v", this.VMID) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPodvminfo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}

type PodVMInfoService interface {
	GetInfo(ctx context.Context, req *GetInfoRequest) (*GetInfoResponse, error)
}

func RegisterPodVMInfoService(srv *github_com_containerd_ttrpc.Server, svc PodVMInfoService) {
	srv.Register("podvminfo.PodVMInfo", map[string]github_com_containerd_ttrpc.Method{
		"GetInfo": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req GetInfoRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.GetInfo(ctx, &req)
		},
	})
}

type podVMInfoClient struct {
	client *github_com_containerd_ttrpc.Client
}

func NewPodVMInfoClient(client *github_com_containerd_ttrpc.Client) PodVMInfoService {
	return &podVMInfoClient{
		client: client,
	}
}

func (c *podVMInfoClient) GetInfo(ctx context.Context, req *GetInfoRequest) (*GetInfoResponse, error) {
	var resp GetInfoResponse
	if err := c.client.Call(ctx, "podvminfo.PodVMInfo", "GetInfo", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
func (m *GetInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPodvminfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPodvminfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPodvminfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPodvminfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPodvminfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPodvminfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPodvminfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wait", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPodvminfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wait = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPodvminfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPodvminfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPodvminfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VMID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPodvminfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPodvminfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPodvminfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VMID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPodvminfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPodvminfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPodvminfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPodvminfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPodvminfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPodvminfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPodvminfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPodvminfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPodvminfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPodvminfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPodvminfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPodvminfo = fmt.Errorf("proto: unexpected end of group")
)
